
De favor cuando haga commit tener esto en la app

import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { Login } from './Componets/Login/Login';
import { Header } from './Componets/Header/Header.jsx';
import { Header_sin_editar } from './Componets/Header/Header_sin_editar.jsx';
import { Footer } from './Componets/Footer/Footer.jsx';
import {Editar_jefe_departamento} from './Componets/Editar/Editar_jefe_departamento.jsx';
import {Editar_Administrador} from './Componets/Editar/Editar_Administrador.jsx';
import { Principal_administrador } from './Componets/Principal/Principal_administrador.jsx';
import { Principal_otro } from './Componets/Principal/Principal_otro.jsx';
// Importa el CSS de Bootstrap
import 'bootstrap/dist/css/bootstrap.min.css';


export function App() {
  return (
      <Router>
        <Content/>
      </Router>
  );
}

function Content() {
  const location = useLocation();
  const hideHeaderFooter = location.pathname === '/Login';

  const permisos = localStorage.getItem('permisos');

  const renderComponent = () => {
      if (location.pathname === '/Principal') {
          if (permisos === '1') {
              return <Principal_administrador />;
          } else if (permisos === '2' || permisos === '3') {
              return <Principal_otro />;
          }
      }
      return null;
  };

  const renderHeader = () => {
    if (location.pathname === '/Principal') {
      if (permisos === '1' || permisos === '2') {
          return <Header />;
      } else if (permisos === '3') {
          return <Header_sin_editar />;
      }
    }
    return null;
  };

  return (
      <>
          {!hideHeaderFooter && renderHeader()}
          <Routes>
              <Route path="/" element={<Navigate to="/Login" />} />
              <Route path="/Login" element={<Login />} />
              <Route path="/Principal" element={renderComponent()} />
              <Route path="/Editar_Administrador" element={<Editar_Administrador />} />
              <Route path="/Editar_jefe_departamento" element={<Editar_jefe_departamento />} />
          </Routes>
          {!hideHeaderFooter && <Footer />}
      </>
  );
}

export default App;

De la 1 a la 31 en la APP.jsx

----------------------------------------------------------------------------------------------
Para trabajar yo
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { Login } from './Componets/Login/Login';
import { Header } from './Componets/Header/Header.jsx';
import { Footer } from './Componets/Footer/Footer.jsx';
import { Departamento_Alta_Baja_Cambio } from './Componets/Departamentos/Departamento_Alta_Baja_Cambio.jsx';
import { Usuario_Alta_Baja_Cambio } from './Componets/Usuario/Usuario_Alta_Baja_Cambio.jsx';
// Importa el CSS de Bootstrap
import 'bootstrap/dist/css/bootstrap.min.css';


export function App() {
  return (
      <Router>
        <Content/>
      </Router>
  );
}

function Content() {
  const location = useLocation();
  const hideHeaderFooter = location.pathname === '/Login';

  return (
      <>
        {!hideHeaderFooter && <Header/>}
        <Routes>
          <Route path="/" element={<Navigate to="/Login" />} />
          <Route path="/Login" element={<Usuario_Alta_Baja_Cambio/>} />
          <Route path="/Principal" element={<Login/>} />
        </Routes>
        {!hideHeaderFooter && <Footer/>}
      </>
  );
}

export default App;
-----------------------------------------------------------------------------------------------
import { Departamento_Alta_Baja_Cambio } from './Componets/Departamentos/Departamento_Alta_Baja_Cambio.jsx';
<Route path="/DAAE" element={<Departamento_Alta_Baja_Cambio/>} />


---------------------------------------------------------------------------------------------------------
linea 645
// Trae los nombres de los espacios ADMON
app.get('/SelectNombrePorEspaciosADMON', async(req,res) => {
    try{
        await sql.connect(config);
        const id_tipoEspacio = req.query.id_tipoEspacio;
        const id_edificio = req.query.id_edificio;
        console.log('idTipoEspacio ', id_tipoEspacio);
        const checkNombreEspacio = await sql.query(`
            SELECT ES.id_espacio, ES.nombre, responsable = u.nombre+' '+u.apellido
            FROM ESPACIOS ES
            INNER JOIN USUARIO U ON U.ID_USUARIO = ES.RESPONSABLE
            WHERE ES.id_tipoEspacio = ${id_tipoEspacio} AND ES.id_edificio = ${id_edificio};
        `);
        res.status(200).json({nombresEspacio: checkNombreEspacio.recordset});
    }catch(error){
        console.error('Error al traer los nombres de los espacios ADMON: ', error.message);
        res.status(500).send('Error al traer los nombres de los espacios ADMON');
    }
});


linea 288 
// Trae los nombres de los espacios
app.get('/SelectNombrePorEspacios', async(req,res) => {
    try{
        await sql.connect(config);
        const id_tipoEspacio = req.query.id_tipoEspacio;
        const id_edificio = req.query.id_edificio;
        const id_departamento = req.query.id_departamento;
        console.log('idTipoEspacio ', id_tipoEspacio);
        const checkNombreEspacio = await sql.query(`
            SELECT ES.id_espacio, ES.nombre, responsable = u.nombre+' '+u.apellido
            FROM ESPACIOS ES
            INNER JOIN usuario u on u.id_usuario = es.responsable
            WHERE ES.id_tipoEspacio = ${id_tipoEspacio} AND ES.id_edificio = ${id_edificio} AND ES.id_departamento = ${id_departamento};
        `);
        res.status(200).json({nombresEspacio: checkNombreEspacio.recordset});
    }catch(error){
        console.error('Error al traer los nombres de los espacios: ', error.message);
        res.status(500).send('Error al traer los nombres de los espacios');
    }
});


linea 1306
//Detalle y caracteristicas de los equipos
app.get('/DetalleEquipo/:idEquipo', async(req, res) => {
    try {
        const { idEquipo } = req.params;
        await sql.connect(config);

        // Consultar primero en la tabla EQUIPO
        const equipoResult = await sql.query`SELECT * FROM EQUIPO WHERE id_equipo = ${idEquipo}`;
        const equipo = equipoResult.recordset[0];

        if (!equipo) {
            return res.status(404).send('Equipo no encontrado');
        }

        // Comprobar si el equipo es una computadora
        const computadoraResult = await sql.query`select 
            c.memoria_RAM, c.almacenamiento,
            tipoComputadora = tc.nombre,
            procesador = p.modelo+' '+p.fabricante, p.nucleos, p.hilos, p.cache,
            tarjeta_grafica = tg.modelo+' '+tg.fabricante, tg.arquitectura,
            sistemaOperativo = so.nombre+' '+so.version_, so.interfaz, so.licencia,
            tarjetaRed = tr.modelo+' '+tr.fabricante
            from COMPUTADORA c
            inner join TIPO_COMPUTADORA tc on tc.id_tipoComputadora = c.id_tipoComputadora
            inner join PROCESADOR p on p.id_procesador = c.procesador
            inner join TARJETA_GRAFICA tg on tg.id_tarjeta = c.tarjeta_grafica
            inner join SISTEMA_OPERATIVO so on so.id_sistema = c.sistema_operativo
            inner join TARJETA_RED tr on tr.id_tarjeta = c.configuracion_red 
            where id_computadora = ${idEquipo}`;
        const computadora = computadoraResult.recordset[0];

        if (computadora) {
            // Si es una computadora, enviar los detalles del equipo y la computadora
            const softwareResult = await sql.query`
                select software = s.nombre+' '+s.version_
                from COMPUTADORA c
                inner join SOFTWARE_COMPUTADORA sc on sc.id_computadora = c.id_computadora
                inner join SOFTWARE s on s.id_software = sc.id_software
                where c.id_computadora = ${idEquipo}`
            const softwares = softwareResult.recordset;
            
            return res.status(200).json({
                tipo: 'Computadora',
                equipo: equipo,
                detalles: computadora,
                softwares: softwares
            });
        }

        //Comprobar si es una impresora
        const impresoraResult = await sql.query`
            select i.resolucion, i.velocidad_impresion, i.conectividad, tipo_impresora = ti.nombre
            from impresora i
            inner join TIPO_IMPRESORA ti on ti.id_tipoImpresora = i.id_tipoImpresora
            where i.id_impresora = ${idEquipo}`;
        const impresora = impresoraResult.recordset[0];

        if(impresora) {
            return res.status(200).json({
                tipo: 'Impresora',
                equipo: equipo,
                detalles: impresora
            });
        }

        // Comprobar si el equipo es un servidor
        const servidorResult = await sql.query`select 
            c.memoria_RAM, c.almacenamiento,
            procesador = p.modelo+' '+p.fabricante, p.nucleos, p.hilos, p.cache,
            tarjeta_grafica = tg.modelo+' '+tg.fabricante, tg.arquitectura,
            sistemaOperativo = so.nombre+' '+so.version_, so.interfaz, so.licencia,
            tarjetaRed = tr.modelo+' '+tr.fabricante
            from SERVIDOR c
            inner join PROCESADOR p on p.id_procesador = c.procesador
            inner join TARJETA_GRAFICA tg on tg.id_tarjeta = c.tarjeta_grafica
            inner join SISTEMA_OPERATIVO so on so.id_sistema = c.sistema_operativo
            inner join TARJETA_RED tr on tr.id_tarjeta = c.configuracion_red
            where id_servidor = ${idEquipo}`;
        const servidor = servidorResult.recordset[0];

        if (servidor) {
            // Si es un servidor, enviar los detalles del equipo y el servidor
            return res.status(200).json({
                tipo: 'Servidor',
                equipo: equipo,
                detalles: servidor
            });
        }

        // Comprobar si el equipo es un switch
        const switchResult = await sql.query`SELECT * FROM SWITCH WHERE id_switch = ${idEquipo}`;
        const Switch = switchResult.recordset[0];

        if (Switch) {
            // Si es un switch, enviar los detalles del equipo y el switch
            return res.status(200).json({
                tipo: 'Switch',
                equipo: equipo,
                detalles: Switch
            });
        }

        // Comprobar si el equipo es un router
        const routerResult = await sql.query`SELECT * FROM ROUTER WHERE id_router = ${idEquipo}`;
        const router = routerResult.recordset[0];

        if (router) {
            // Si es un switch, enviar los detalles del equipo y el switch
            return res.status(200).json({
                tipo: 'Router',
                equipo: equipo,
                detalles: router
            });
        }

        // Comprobar si el equipo es un switch
        const escanerResult = await sql.query`SELECT * FROM ESCANER WHERE id_escaner = ${idEquipo}`;
        const escaner = escanerResult.recordset[0];

        if (escaner) {
            // Si es un switch, enviar los detalles del equipo y el switch
            return res.status(200).json({
                tipo: 'Escaner',
                equipo: equipo,
                detalles: escaner
            });
        }
        // Si no es ni computadora ni servidor
        res.status(404).send('El equipo no es ni una computadora ni un servidor');

    } catch (error) {
        console.error('Error al obtener los detalles del equipo:', error.message);
        res.status(500).send('Error al obtener los detalles del equipo');
    }
});